{"version":3,"sources":["assets/textures/earth-blue-marble.jpg","assets/textures/night-sky.png","assets/textures/earth-topology.png","minimal_countries.geojson","index.js"],"names":["World","useState","features","countries","setCountries","hover","setHover","weightColor","d3","domain","range","clamp","useEffect","fetch","data","then","res","json","monitorHeight","size","width","globeImageUrl","globeImage","bumpImageUrl","bumpImage","backgroundImageUrl","backgroundImage","onPolygonHover","polygonsData","filter","properties","MtCO2_EST","polygonsTransitionDuration","polygonAltitude","d","polygonCapColor","polygonSideColor","polygonStrokeColor","polygonLabel","NAME_KR","ISO_A2","toLocaleString","navigator","language","MtCO2_YEAR","POP_EST","POP_YEAR","POP_RANK","GDP_NOMINAL_EST","GDP_NOMINAL_YEAR","GDP_PPP_EST","GDP_PPP_YEAR","ReactDOM","render","document","getElementById"],"mappings":"8LAAe,MAA0B,8CCA1B,MAA0B,sCCA1B,MAA0B,2CCA1B,MAA0B,kD,yBCWzC,SAASA,IACP,MAAkCC,mBAAS,CAAEC,SAAU,KAAvD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,qBAA1B,mBAAOI,EAAP,KAAcC,EAAd,KACMC,EAAcC,MACjBC,OAAO,CAAC,EAAG,MACXC,MAAM,CAAC,2BAA4B,yBACnCC,OAAM,GAOT,OALAC,qBAAU,WAERC,MAAMC,GAAMC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,KAAKX,KACxC,IAEI,cAAC,SAAD,CAAQc,eAAa,EAArB,SACJ,gBAAGC,EAAH,EAAGA,KAAH,OACC,cAAC,IAAD,CACEC,MAAOD,EAAKC,MACZC,cAAeC,EACfC,aAAcC,EACdC,mBAAoBC,EAEpBC,eAAgBrB,EAChBsB,aAAczB,EAAUD,SAAS2B,QAAO,qBAAGC,WAAsBC,aACjEC,2BAA4B,IAC5BC,gBAAiB,SAAAC,GAAC,OAAIA,IAAM7B,EAAQ,IAAO,KAC3C8B,gBAAiB,gBAAeD,EAAf,EAAGJ,WAAH,OAAuBvB,EAAY2B,EAAEH,YACtDK,iBAAkB,gBAAeF,EAAf,EAAGJ,WAAH,OAAuBvB,EAAY2B,EAAEH,YACvDM,mBAAoB,iBAAM,4BAC1BC,aAAc,gBAAeJ,EAAf,EAAGJ,WAAH,+BACPI,EAAEK,QADK,aACOL,EAAEM,OADT,oEAEAN,EAAEH,UAAUU,eAAeC,UAAUC,UAFrC,wBAEyDT,EAAEU,WAF3D,wDAGFV,EAAEW,QAAQJ,eAAeC,UAAUC,UAHjC,oBAGiDT,EAAEY,SAHnD,+DAIAZ,EAAEa,SAJF,+DAKWb,EAAEc,gBAAgBP,eAAeC,UAAUC,UALtD,aAKoET,EAAEe,iBALtE,4DAMOf,EAAEgB,YAAYT,eAAeC,UAAUC,UAN9C,aAM4DT,EAAEiB,aAN9D,8BAatBC,IAASC,OAAO,cAACrD,EAAD,IAAWsD,SAASC,eAAe,W","file":"static/js/main.fa441da7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/earth-blue-marble.7deee995.jpg\";","export default __webpack_public_path__ + \"static/media/night-sky.51b096ab.png\";","export default __webpack_public_path__ + \"static/media/earth-topology.739e278b.png\";","export default __webpack_public_path__ + \"static/media/minimal_countries.2e612b23.geojson\";","import { useState, useEffect } from 'react';\nimport { SizeMe } from 'react-sizeme';\nimport ReactDOM from 'react-dom';\nimport Globe from 'react-globe.gl';\nimport globeImage from './assets/textures/earth-blue-marble.jpg';\nimport backgroundImage from './assets/textures/night-sky.png';\nimport bumpImage from './assets/textures/earth-topology.png';\nimport data from './minimal_countries.geojson';\nimport * as d3 from \"d3\";\nimport './index.css'\n\nfunction World() {\n  const [countries, setCountries] = useState({ features: [] })\n  const [hover, setHover] = useState()\n  const weightColor = d3.scaleLinear()\n    .domain([0, 5000])\n    .range(['rgba(173, 216, 230, 0.5)', 'rgba(139, 0, 0, 0.8)'])\n    .clamp(true)\n\n  useEffect(() => {\n    // load data\n    fetch(data).then(res => res.json()).then(setCountries);\n  }, [])\n\n  return <SizeMe monitorHeight>\n    {({ size }) => (\n      <Globe\n        width={size.width}\n        globeImageUrl={globeImage}\n        bumpImageUrl={bumpImage}\n        backgroundImageUrl={backgroundImage}\n\n        onPolygonHover={setHover}\n        polygonsData={countries.features.filter(({ properties: d }) => d.MtCO2_EST)}\n        polygonsTransitionDuration={300}\n        polygonAltitude={d => d === hover ? 0.02 : 0.01}\n        polygonCapColor={({ properties: d }) => weightColor(d.MtCO2_EST)}\n        polygonSideColor={({ properties: d }) => weightColor(d.MtCO2_EST)}\n        polygonStrokeColor={() => 'rgba(255, 255, 255, 0.1)'}\n        polygonLabel={({ properties: d }) => `\n          <b>${d.NAME_KR} (${d.ISO_A2})</b> <br>\n          탄소배출량: <i>${d.MtCO2_EST.toLocaleString(navigator.language)} MtCO₂ (${d.MtCO2_YEAR})</i> <br>\n          인구수: <i>${d.POP_EST.toLocaleString(navigator.language)} 명 (${d.POP_YEAR})</i> <br>\n          인구 순위: <i>${d.POP_RANK}</i> <br>\n          1인당 GDP(nominal): <i>${d.GDP_NOMINAL_EST.toLocaleString(navigator.language)} (${d.GDP_NOMINAL_YEAR})</i> <br>\n          1인당 GDP(PPP): <i>${d.GDP_PPP_EST.toLocaleString(navigator.language)} (${d.GDP_PPP_YEAR})</i> <br>\n        `}\n      />\n    )}\n  </SizeMe>\n};\n\nReactDOM.render(<World />, document.getElementById('root'));\n"],"sourceRoot":""}