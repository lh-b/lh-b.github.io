{"version":3,"sources":["components/Field/style.module.css","components/Game/style.module.css","components/Settings/style.module.css","components/Statistics/style.module.css","components/App/style.module.css","components/Panel/style.module.css","components/Panel/index.tsx","types.ts","components/Field/index.tsx","hooks/useSettings.ts","components/Settings/index.tsx","components/Statistics/index.tsx","hooks/useGame.ts","hooks/useGameController.ts","utils/helpers.ts","hooks/useInterval.ts","components/Game/index.tsx","components/App/index.tsx","index.tsx"],"names":["module","exports","Panel","className","children","cn","style","SettingsLevel","GameState","Field","field","isSmall","gameState","onOpen","onSetFlag","onDeleteFlag","isDisabled","Pause","GameOver","label","isOpened","hasBomb","bombsAround","hasFlag","classes","hasOpenedBomb","dangerLevel1","dangerLevel2","dangerLevel3","dangerLevel4","dangerLevel5","dangerLevel6","handleClick","useCallback","handleContextMenuClick","event","preventDefault","Playing","disabled","onClick","onContextMenu","React","memo","settings","level","Beginner","xFieldsCount","yFieldsCount","bombsCount","Intermediate","Expert","getSettingsByLevel","find","s","Settings","onLevelChange","handleLevelChange","settingsLevel","map","button","isActive","Statistics","title","icon","value","emoji","cycles","coordsToKey","x","y","useGameController","initialLevel","useState","setSettings","setSettingsByLevel","useSettings","Map","fields","setFields","fieldsOpened","setFieldsOpened","flagsCount","setFlagsCount","areCoordsInBoundaries","findCoordsAround","filter","generateEmptyFields","coords","set","id","generateFieldsWithBombs","firstClicked","min","max","fieldsWithBombsIds","Set","reservedIdsAround","get","reservedIds","size","randomBombId","Math","floor","random","has","add","values","forEach","openEmptyFields","clickedField","emptiesStack","verifiedEmptiesIds","opened","deletedFlags","clickedFieldToOpen","verifyEmptiesAround","coordsAround","sibling","push","shift","length","openFieldWithBombsAround","openAllBombs","setFlagValue","initFields","openField","setFlag","deleteFlag","useEffect","console","log","useGame","timer","setTimer","formattedTimer","setFormattedTimer","Idle","setGameState","prepareGame","continuePlaying","pause","onFieldOpen","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","secondsCount","hours","minutes","seconds","formatSeconds","alert","Game","playButtonLabel","useMemo","pauseButtonLabel","fieldsStyle","gridTemplateColumns","gridTemplateRows","handlePauseButtonClick","Array","from","aside","stats","buttonWrapper","href","buttonGitHub","target","rel","src","alt","githubIcon","App","container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adaf5f50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Field\":\"style_Field__1uZT2\",\"isSmall\":\"style_isSmall__3fL8H\",\"isOpened\":\"style_isOpened__3p0X-\",\"hasOpenedBomb\":\"style_hasOpenedBomb__3032S\",\"dangerLevel1\":\"style_dangerLevel1__2uaAi\",\"dangerLevel2\":\"style_dangerLevel2__1LCeU\",\"dangerLevel3\":\"style_dangerLevel3__8SuUW\",\"dangerLevel4\":\"style_dangerLevel4__l9zS5\",\"dangerLevel5\":\"style_dangerLevel5__u2mBf\",\"dangerLevel6\":\"style_dangerLevel6__82_li\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"style_Game__1hxvS\",\"fields\":\"style_fields__3IOHZ\",\"aside\":\"style_aside__jPb3A\",\"button\":\"style_button__2A5EY\",\"buttonGitHub\":\"style_buttonGitHub__1c4d3\",\"githubIcon\":\"style_githubIcon__3A4SH\",\"stats\":\"style_stats__3Nm0h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Settings\":\"style_Settings__3LwmE\",\"button\":\"style_button__1g1Ma\",\"isActive\":\"style_isActive__2dbMt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Statistics\":\"style_Statistics__3qKV5\",\"emoji\":\"style_emoji__1MTQg\",\"value\":\"style_value__sHPCz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"style_App__IcBB-\",\"container\":\"style_container__3VzXj\",\"title\":\"style_title__3EZpl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Panel\":\"style_Panel__2HnYF\"};","import React from 'react';\nimport cn from 'classnames';\n\nimport style from './style.module.css';\n\ninterface IProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport default function Panel({className = '', children}: IProps) {\n  return <div className={cn(style.Panel, className)}>{children}</div>;\n}\n","export type FieldCoords = [number, number];\nexport type FieldsMap = Map<string, IField>;\n\nexport interface IField {\n  id: number;\n  coords: FieldCoords;\n  isOpened: boolean;\n  hasBomb: boolean;\n  hasFlag: boolean;\n  bombsAround: number;\n}\n\nexport interface ISettings {\n  level: SettingsLevel;\n  bombsCount: number;\n  xFieldsCount: number;\n  yFieldsCount: number;\n}\n\nexport enum SettingsLevel {\n  Beginner = 'Beginner',\n  Intermediate = 'Intermediate',\n  Expert = 'Expert',\n  SuperExpert = 'SuperExpert',\n}\n\nexport enum GameState {\n  Idle = 'Idle',\n  Playing = 'Playing',\n  Pause = 'Pause',\n  GameOver = 'GameOver',\n}\n","import React, {useCallback} from 'react';\nimport cn from 'classnames';\nimport {GameState, IField} from '../../types';\n\nimport style from './style.module.css';\n\ninterface IProps {\n  field: IField;\n  isSmall: boolean;\n  gameState: GameState;\n  onOpen: (field: IField) => void;\n  onSetFlag: (field: IField) => void;\n  onDeleteFlag: (field: IField) => void;\n}\n\nfunction Field({field, isSmall, gameState, onOpen, onSetFlag, onDeleteFlag}: IProps) {\n  const isDisabled = gameState === GameState.Pause || gameState === GameState.GameOver;\n  let label: number | string = '';\n\n  if (field.isOpened) {\n    if (field.hasBomb) {\n      label = '💣';\n    } else if (field.bombsAround) {\n      label = field.bombsAround;\n    }\n  } else if (field.hasFlag) {\n    label = '🚩';\n  }\n\n  const classes = cn({\n    [style.Field]: true,\n    [style.isOpened]: field.isOpened,\n    [style.isSmall]: isSmall,\n    [style.hasOpenedBomb]: field.isOpened && field.hasBomb,\n    [style.dangerLevel1]: field.isOpened && field.bombsAround === 1,\n    [style.dangerLevel2]: field.isOpened && field.bombsAround === 2,\n    [style.dangerLevel3]: field.isOpened && field.bombsAround === 3,\n    [style.dangerLevel4]: field.isOpened && field.bombsAround === 4,\n    [style.dangerLevel5]: field.isOpened && field.bombsAround === 5,\n    [style.dangerLevel6]: field.isOpened && field.bombsAround >= 6,\n  });\n\n  // Handlers\n  const handleClick = useCallback(() => {\n    if (!field.hasFlag) {\n      onOpen(field);\n    }\n  }, [field, onOpen]);\n\n  const handleContextMenuClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      // Disable context menu\n      event.preventDefault();\n\n      if (gameState === GameState.Playing && !field.isOpened) {\n        if (field.hasFlag) {\n          onDeleteFlag(field);\n        } else {\n          onSetFlag(field);\n        }\n      }\n    },\n    [field, onSetFlag, onDeleteFlag, gameState],\n  );\n\n  return (\n    <button className={classes} disabled={isDisabled} onClick={handleClick} onContextMenu={handleContextMenuClick}>\n      {label}\n    </button>\n  );\n}\n\nexport default React.memo(Field);\n","import {useCallback, useState} from 'react';\nimport {ISettings, SettingsLevel} from '../types';\n\nexport const settings: ISettings[] = [\n  {\n    level: SettingsLevel.Beginner,\n    xFieldsCount: 8,\n    yFieldsCount: 8,\n    bombsCount: 10,\n  },\n  {\n    level: SettingsLevel.Intermediate,\n    xFieldsCount: 16,\n    yFieldsCount: 16,\n    bombsCount: 40,\n  },\n  {\n    level: SettingsLevel.Expert,\n    xFieldsCount: 30,\n    yFieldsCount: 16,\n    bombsCount: 99,\n  },\n];\n\nfunction getSettingsByLevel(level: SettingsLevel): ISettings {\n  return settings.find((s) => s.level === level) || settings[0];\n}\n\nexport default function useSettings(initialLevel: SettingsLevel) {\n  const [settings, setSettings] = useState<ISettings>(getSettingsByLevel(initialLevel));\n\n  const setSettingsByLevel = useCallback((level: SettingsLevel) => {\n    setSettings(getSettingsByLevel(level));\n  }, []);\n\n  return {\n    settings,\n    setSettings,\n    setSettingsByLevel,\n  };\n}\n","import React, {useCallback} from 'react';\nimport cn from 'classnames';\n\nimport Panel from '../Panel';\nimport {settings} from '../../hooks/useSettings';\nimport {SettingsLevel} from '../../types';\nimport style from './style.module.css';\n\ninterface IProps {\n  className?: string;\n  level: SettingsLevel;\n  onLevelChange: (level: SettingsLevel) => void;\n}\n\nfunction Settings({className = '', level, onLevelChange}: IProps) {\n  const handleLevelChange = useCallback(\n    (settingsLevel: SettingsLevel) => () => onLevelChange(settingsLevel),\n    [onLevelChange],\n  );\n\n  return (\n    <Panel className={cn(style.Settings, className)}>\n      {settings.map((s) => (\n        <button\n          key={s.level}\n          className={cn(style.button, {[style.isActive]: level === s.level})}\n          onClick={handleLevelChange(s.level)}\n        >\n          {s.level}\n        </button>\n      ))}\n    </Panel>\n  );\n}\n\nexport default React.memo(Settings);\n","import React from 'react';\nimport cn from 'classnames';\n\nimport style from './style.module.css';\n\ninterface IProps {\n  value: string;\n  icon: string;\n  title: string;\n  className?: string;\n}\n\nfunction Statistics({className = '', title, icon, value}: IProps) {\n  return (\n    <div className={cn(style.Statistics, className)} title={title}>\n      <div className={style.emoji}>{icon}</div>\n      <div className={style.value}>{value}</div>\n    </div>\n  );\n}\n\nexport default React.memo(Statistics);\n","import {useCallback, useEffect, useState} from 'react';\nimport {IField, FieldsMap, FieldCoords, ISettings} from '../types';\nimport {randomNumber} from '../utils/helpers';\n\n// Debug cycles counter\nlet cycles = 0;\n\n// Changes field coords into convenient Map key\nfunction coordsToKey([x, y]: FieldCoords): string {\n  return `[${x},${y}]`;\n}\n\nexport default function useGame(settings: ISettings) {\n  // Array of game fields\n  const [fields, setFields] = useState<FieldsMap>(new Map());\n  // Array of game fields which has been opened\n  const [fieldsOpened, setFieldsOpened] = useState<number>(0);\n  // Flags count\n  const [flagsCount, setFlagsCount] = useState<number>(0);\n\n  // Private methods\n  // Checks if given X and Y coordinates are in game field boundaries\n  const areCoordsInBoundaries = useCallback(\n    ([x, y]: FieldCoords): boolean => {\n      return x >= 1 && x <= settings.xFieldsCount && y >= 1 && y <= settings.yFieldsCount;\n    },\n    [settings],\n  );\n\n  const findCoordsAround = useCallback(\n    ([x, y]: FieldCoords): FieldCoords[] => {\n      const coords = [\n        [x - 1, y - 1],\n        [x, y - 1],\n        [x + 1, y - 1],\n        [x - 1, y],\n        [x + 1, y],\n        [x - 1, y + 1],\n        [x, y + 1],\n        [x + 1, y + 1],\n      ];\n\n      return coords.filter(([x, y]) => {\n        cycles += 1;\n        return areCoordsInBoundaries([x, y]);\n      }) as FieldCoords[];\n    },\n    [areCoordsInBoundaries],\n  );\n\n  const generateEmptyFields = useCallback((): FieldsMap => {\n    const fields: FieldsMap = new Map();\n\n    for (let y = 0; y < settings.yFieldsCount; y++) {\n      for (let x = 0; x < settings.xFieldsCount; x++) {\n        cycles += 1;\n        const coords: FieldCoords = [x + 1, y + 1];\n        fields.set(coordsToKey(coords), {\n          id: x + 1 + settings.xFieldsCount * y,\n          coords,\n          isOpened: false,\n          hasBomb: false,\n          hasFlag: false,\n          bombsAround: 0,\n        });\n      }\n    }\n\n    return fields;\n  }, [settings]);\n\n  const generateFieldsWithBombs = useCallback(\n    (firstClicked: IField): FieldsMap => {\n      const fields: FieldsMap = generateEmptyFields();\n      const fieldsWithBombsIds: Set<number> = new Set();\n\n      // Generate reserved fields which can't have bombs due to the first clicked field\n      const reservedIdsAround = findCoordsAround(firstClicked.coords).map((coords) => {\n        cycles += 1;\n        return fields.get(coordsToKey(coords))?.id as number;\n      });\n      const reservedIds = new Set<number>([firstClicked.id, ...reservedIdsAround]);\n\n      // Random generator for bombs IDs\n      while (fieldsWithBombsIds.size < settings.bombsCount) {\n        cycles += 1;\n        const randomBombId = randomNumber(1, settings.xFieldsCount * settings.yFieldsCount);\n\n        if (!reservedIds.has(randomBombId)) {\n          fieldsWithBombsIds.add(randomBombId);\n        }\n      }\n\n      for (const field of fields.values()) {\n        cycles += 1;\n        field.hasBomb = fieldsWithBombsIds.has(field.id);\n\n        if (field.hasBomb) {\n          findCoordsAround(field.coords)\n            // eslint-disable-next-line no-loop-func\n            .map((coords) => {\n              cycles += 1;\n              return fields.get(coordsToKey(coords));\n            })\n            // eslint-disable-next-line no-loop-func\n            .forEach((field) => {\n              cycles += 1;\n              return field && field.bombsAround++;\n            });\n        }\n      }\n\n      return fields;\n    },\n    [findCoordsAround, generateEmptyFields, settings],\n  );\n\n  const openEmptyFields = useCallback(\n    (clickedField: IField, fields: FieldsMap): void => {\n      const emptiesStack: IField[] = [clickedField];\n      const verifiedEmptiesIds = new Set<number>();\n      let opened = 0;\n      let deletedFlags = 0;\n\n      // Open currently clicked field\n      const clickedFieldToOpen = fields.get(coordsToKey(clickedField.coords));\n\n      if (clickedFieldToOpen) {\n        clickedFieldToOpen.isOpened = true;\n        opened += 1;\n      }\n\n      // Recursively check all empty fields around clicked field\n      // and change their `isOpened` flag\n      const verifyEmptiesAround = (field: IField) => {\n        const coordsAround = findCoordsAround(field.coords);\n\n        for (const coords of coordsAround) {\n          cycles += 1;\n          const sibling = fields.get(coordsToKey(coords));\n\n          if (sibling && !sibling.isOpened) {\n            sibling.isOpened = true;\n            opened += 1;\n\n            if (sibling.hasFlag) {\n              sibling.hasFlag = false;\n              deletedFlags += 1;\n            }\n\n            if (\n              sibling.bombsAround === 0 &&\n              !emptiesStack.find(({id}) => id === sibling.id) &&\n              !verifiedEmptiesIds.has(sibling.id)\n            ) {\n              emptiesStack.push(sibling);\n            }\n          }\n        }\n\n        verifiedEmptiesIds.add(field.id);\n        emptiesStack.shift();\n\n        if (emptiesStack.length > 0) {\n          verifyEmptiesAround(emptiesStack[0]);\n        }\n      };\n\n      verifyEmptiesAround(clickedField);\n\n      if (deletedFlags) {\n        setFlagsCount(flagsCount - deletedFlags);\n      }\n\n      setFields(new Map(fields));\n      setFieldsOpened(fieldsOpened + opened);\n    },\n    [findCoordsAround, fieldsOpened, flagsCount],\n  );\n\n  const openFieldWithBombsAround = useCallback(\n    (clickedField: IField): void => {\n      for (const field of fields.values()) {\n        cycles += 1;\n        if (clickedField.id === field.id) {\n          field.isOpened = true;\n          break;\n        }\n      }\n\n      setFields(new Map(fields));\n      setFieldsOpened(fieldsOpened + 1);\n    },\n    [fields, fieldsOpened],\n  );\n\n  const openAllBombs = useCallback((): void => {\n    let opened = 0;\n    for (const field of fields.values()) {\n      cycles += 1;\n      if (field.hasBomb) {\n        field.isOpened = true;\n        opened += 1;\n      }\n      if (opened >= settings.bombsCount) {\n        break;\n      }\n    }\n\n    setFields(new Map(fields));\n  }, [fields, settings]);\n\n  const setFlagValue = useCallback(\n    (clickedField: IField, value: boolean) => {\n      for (const field of fields.values()) {\n        cycles += 1;\n        if (clickedField.id === field.id) {\n          field.hasFlag = value;\n          break;\n        }\n      }\n\n      setFields(new Map(fields));\n      setFlagsCount(value ? flagsCount + 1 : flagsCount - 1);\n    },\n    [fields, flagsCount],\n  );\n\n  // Public methods\n  const initFields = useCallback(() => {\n    setFields(generateEmptyFields());\n    setFieldsOpened(0);\n    setFlagsCount(0);\n  }, [generateEmptyFields]);\n\n  // Main public handler for field click\n  const openField = useCallback(\n    (clickedField: IField) => {\n      if (clickedField.isOpened) {\n        return;\n      }\n\n      if (clickedField.hasBomb) {\n        // Handle click on field with bomb\n        openAllBombs();\n      } else if (fieldsOpened === 0) {\n        // Handle first click.\n        // Regenerate fields with bombs and then open fields around first clicked field.\n        // The first click in any game will never be a mine.\n        openEmptyFields(clickedField, generateFieldsWithBombs(clickedField));\n      } else if (clickedField.bombsAround === 0) {\n        // Handle click on empty field and open fields around it.\n        openEmptyFields(clickedField, fields);\n      } else {\n        openFieldWithBombsAround(clickedField);\n      }\n    },\n    [fields, fieldsOpened, generateFieldsWithBombs, openEmptyFields, openAllBombs, openFieldWithBombsAround],\n  );\n\n  const setFlag = useCallback(\n    (clickedField: IField) => {\n      if (flagsCount >= settings.bombsCount) {\n        return;\n      }\n\n      setFlagValue(clickedField, true);\n    },\n    [setFlagValue, flagsCount, settings],\n  );\n\n  const deleteFlag = useCallback(\n    (clickedField: IField) => {\n      if (flagsCount < 1) {\n        return;\n      }\n\n      setFlagValue(clickedField, false);\n    },\n    [setFlagValue, flagsCount],\n  );\n\n  // Update debug cycles counter on every fields change\n  useEffect(() => {\n    console.log(`Cycles count: ${cycles}`);\n    cycles = 0;\n  }, [fields]);\n\n  return {\n    fields,\n    fieldsOpened,\n    openField,\n    initFields,\n    flagsCount,\n    setFlag,\n    deleteFlag,\n  };\n}\n","import {useCallback, useEffect, useState} from 'react';\nimport {GameState, IField, SettingsLevel} from '../types';\nimport {formatSeconds} from '../utils/helpers';\nimport useSettings from './useSettings';\nimport useGame from './useGame';\nimport useInterval from './useInterval';\n\nexport default function useGameController() {\n  // Use game settings hook\n  const {settings, setSettingsByLevel} = useSettings(SettingsLevel.Beginner);\n  // Game main logic hook\n  const {fields, fieldsOpened, openField, initFields, flagsCount, setFlag, deleteFlag} = useGame(settings);\n  // Time in seconds spent on the game\n  const [timer, setTimer] = useState<number>(0);\n  // Formatted HH:MM:SS `timer`\n  const [formattedTimer, setFormattedTimer] = useState<string>('00:00');\n  // Current state of the game\n  const [gameState, setGameState] = useState<GameState>(GameState.Idle);\n\n  // Public methods\n  const prepareGame = useCallback(() => {\n    initFields();\n    setTimer(0);\n    setGameState(GameState.Idle);\n  }, [initFields]);\n\n  const continuePlaying = useCallback(() => {\n    setGameState(GameState.Playing);\n  }, []);\n\n  const pause = useCallback(() => {\n    setGameState(GameState.Pause);\n  }, []);\n\n  const onFieldOpen = useCallback(\n    (clickedField: IField) => {\n      if (clickedField.hasBomb) {\n        // Handle click on field with bomb\n        setGameState(GameState.GameOver);\n      } else if (fieldsOpened === 0) {\n        // Handle first click.\n        // Set game state to `Playing`\n        setGameState(GameState.Playing);\n      }\n\n      // Open field with `useGame` handler\n      openField(clickedField);\n    },\n    [fieldsOpened, openField],\n  );\n\n  // Run `setInterval` every time when `gameState` is GameState.Playing\n  useInterval(\n    () => {\n      setTimer(timer + 1);\n    },\n    gameState === GameState.Playing ? 1000 : null,\n  );\n\n  // Initialize game on mount\n  useEffect(() => {\n    prepareGame();\n  }, [prepareGame]);\n\n  // Regenerate game fields when settings changed\n  useEffect(() => {\n    prepareGame();\n  }, [settings, prepareGame]);\n\n  // Format seconds on each `timer` change\n  useEffect(() => {\n    setFormattedTimer(formatSeconds(timer));\n  }, [timer]);\n\n  // Check game win state\n  useEffect(() => {\n    if (fieldsOpened + settings.bombsCount === settings.xFieldsCount * settings.yFieldsCount) {\n      alert('Congratulations! You won!');\n      setGameState(GameState.GameOver);\n    }\n  }, [fieldsOpened, settings]);\n\n  return {\n    settings,\n    setSettingsByLevel,\n    fields,\n    fieldsOpened,\n    timer,\n    formattedTimer,\n    gameState,\n    prepareGame,\n    continuePlaying,\n    pause,\n    onFieldOpen,\n    flagsCount,\n    setFlag,\n    deleteFlag,\n  };\n}\n","/**\n * Generates random number from `min` to `max`\n */\nexport function randomNumber(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n/**\n * Parses number of seconds to HH:MM:SS format\n */\nexport function formatSeconds(secondsCount: number): string {\n  let hours: number | string = Math.floor(secondsCount / 3600);\n  let minutes: number | string = Math.floor((secondsCount - hours * 3600) / 60);\n  let seconds: number | string = secondsCount - hours * 3600 - minutes * 60;\n\n  if (hours < 10) {\n    hours = `0${hours}`;\n  }\n\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  return `${hours !== '00' ? `${hours}:` : ``}${minutes}:${seconds}`;\n}\n","import {useEffect, useRef} from 'react';\n\ntype IntervalCallback = () => void;\n\nexport default function useInterval(callback: IntervalCallback, delay: number | null) {\n  const savedCallback = useRef<IntervalCallback>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => {\n      if (savedCallback.current) {\n        savedCallback.current();\n      }\n    };\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React, {useCallback, useMemo} from 'react';\nimport cn from 'classnames';\nimport Panel from '../Panel';\nimport Field from '../Field';\nimport Settings from '../Settings';\nimport Statistics from '../Statistics';\nimport useGameController from '../../hooks/useGameController';\nimport {GameState, SettingsLevel} from '../../types';\n\nimport style from './style.module.css';\n\nexport default function Game() {\n  const {\n    settings,\n    setSettingsByLevel,\n    fields,\n    onFieldOpen,\n    fieldsOpened,\n    formattedTimer,\n    prepareGame,\n    continuePlaying,\n    pause,\n    gameState,\n    flagsCount,\n    setFlag,\n    deleteFlag,\n  } = useGameController();\n\n  // Button labels getters\n  const playButtonLabel = useMemo(() => {\n    switch (gameState) {\n      case GameState.Idle:\n        return 'Play';\n      default:\n        return 'Play again';\n    }\n  }, [gameState]);\n\n  const pauseButtonLabel = useMemo(() => {\n    switch (gameState) {\n      case GameState.Pause:\n        return 'Continue';\n      default:\n        return 'Pause';\n    }\n  }, [gameState]);\n\n  // Grid styles for specific settings\n  const fieldsStyle = useMemo(\n    () => ({\n      gridTemplateColumns: `repeat(${settings.xFieldsCount}, 1fr)`,\n      gridTemplateRows: `repeat(${settings.yFieldsCount}, 1fr)`,\n    }),\n    [settings],\n  );\n\n  // Event handlers\n  const handlePauseButtonClick = useCallback(() => {\n    if (gameState === GameState.Pause) {\n      continuePlaying();\n    } else {\n      pause();\n    }\n  }, [gameState, pause, continuePlaying]);\n\n  return (\n    <>\n      <Settings level={settings.level} onLevelChange={setSettingsByLevel} />\n      <Panel className={style.Game}>\n        <section className={style.fields} style={fieldsStyle}>\n          {Array.from(fields.values()).map((field) => (\n            <Field\n              key={field.id}\n              field={field}\n              gameState={gameState}\n              onOpen={onFieldOpen}\n              onSetFlag={setFlag}\n              onDeleteFlag={deleteFlag}\n              isSmall={settings.level !== SettingsLevel.Beginner}\n            />\n          ))}\n        </section>\n        <aside className={style.aside}>\n          <div className={style.stats}>\n            <Statistics value={formattedTimer} icon=\"🕑\" title=\"Timer\" />\n            <Statistics\n              value={`${fieldsOpened}/${settings.xFieldsCount * settings.yFieldsCount - settings.bombsCount}`}\n              icon=\"✅\"\n              title=\"Opened fields\"\n            />\n            <Statistics\n              value={`${settings.bombsCount - flagsCount}/${settings.bombsCount}`}\n              icon=\"🚩\"\n              title=\"Free flags count\"\n            />\n            <Statistics value={`${settings.xFieldsCount}x${settings.yFieldsCount}`} icon=\"📐\" title=\"Cells count\" />\n          </div>\n          <div className={style.buttonWrapper}>\n            {gameState === GameState.Playing || gameState === GameState.Idle || (\n              <button className={style.button} onClick={prepareGame}>\n                {playButtonLabel}\n              </button>\n            )}\n            {(gameState === GameState.Playing || gameState === GameState.Pause) && (\n              <button className={style.button} onClick={handlePauseButtonClick}>\n                {pauseButtonLabel}\n              </button>\n            )}\n            <a\n              href=\"https://github.com/adlite/minesweeper-react-typescript\"\n              className={cn(style.button, style.buttonGitHub)}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <img src=\"/assets/img/github.svg\" alt=\"View source on GitHub\" className={style.githubIcon} />\n              View source\n            </a>\n          </div>\n        </aside>\n      </Panel>\n    </>\n  );\n}\n","import Game from '../Game';\nimport style from './style.module.css';\n\nexport default function App() {\n  return (\n    <main className={style.App}>\n      <div className={style.container}>\n        <h1 className={style.title}>💣minesweeper</h1>\n        <Game />\n      </div>\n    </main>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './styles/vendor/reset.css';\nimport './styles/colors.css';\nimport './styles/main.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}