{"version":3,"sources":["actions/ui/month.js","config/locale.js","helpers/calendar.js","selectors/ui/month.js","actions/ui/reminder.js","components/icons/PlusIcon.js","components/AppHeader.js","components/calendar/MonthlyCalendarHeader.js","helpers/colors.js","components/shared/prop-types/date.js","selectors/ui/calendar.js","selectors/dates.js","selectors/reminders.js","components/calendar/MonthlyCalendarDateReminder.js","components/calendar/MonthlyCalendarDate.js","components/calendar/MonthlyCalendarGrid.js","components/calendar/MonthlyCalendar.js","selectors/ui/reminder.js","components/icons/XIcon.js","components/shared/modal/ModalHeader.js","components/shared/modal/ModalBackdrop.js","components/shared/modal/ModalResponsive.js","components/shared/forms/FormTextInput.js","components/shared/forms/FormDatePicker.js","components/shared/forms/FormErrorMessage.js","components/shared/forms/FormLabel.js","components/shared/forms/FormFieldset.js","components/shared/buttons/BaseButton.js","components/shared/forms/FormActions.js","components/icons/CheckIcon.js","components/shared/forms/FormTimePicker.js","components/reminders/ReminderColorCircle.js","components/icons/ExpandIcon.js","components/reminders/ReminderColorPickerItem.js","components/reminders/ReminderColorPicker.js","actions/ui/forecast.js","components/shared/prop-types/reminder.js","selectors/ui/forecast.js","components/icons/ChevronsUpIcon.js","components/icons/ChevronsDownIcon.js","components/reminders/forecast/ReminderForecast.js","components/reminders/forecast/ReminderForecastContainer.js","components/reminders/ReminderForm.js","components/reminders/ReminderModal.js","components/reminders/ReminderContainer.js","components/App.js","reportWebVitals.js","reducers/ui/index.js","reducers/ui/month.js","reducers/ui/reminder.js","reducers/ui/forecast.js","actions/dates.js","reducers/dates.js","actions/reminders.js","reducers/index.js","reducers/reminders.js","config/endpoints.js","config/keys.js","infra/api/forecast.js","sagas/ui/forecast.js","helpers/uuid.js","sagas/ui/reminder.js","sagas/index.js","index.js"],"names":["SET_MONTH","APP_LOCALE","process","JC_CALENDAR_APP_LOCALE","MONTH_FORMAT","DATE_FORMAT","TIME_FORMAT","weekendNumbers","Object","freeze","toLocalWeekdayNumber","isoWeekday","dateTimeToDateString","dateTime","toFormat","locale","dateTimeToTimeString","toLocaleString","DateTime","TIME_24_SIMPLE","getMonth","state","ui","month","getDisplayMonthAndYear","createSelector","monthString","fromFormat","year","NEW_REMINDER","EDIT_REMINDER","SUBMIT_REMINDER","OPEN_REMINDER","CLOSE_REMINDER","newReminder","initialDate","type","payload","editReminder","reminder","submitReminder","openReminder","closeReminder","PlusIcon","props","className","svgClassName","xmlns","width","height","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","connect","dispatch","bindActionCreators","onClick","MonthlyCalendarHeader","weekDays","map","weekDay","long","short","narrow","DEFAULT_COLOR","ALL_COLORS","getBackgroundColor","color","PropTypes","shape","key","string","isRequired","text","trailing","bool","isWeekend","id","description","oneOf","number","displayTime","city","getMonthlyCalendarGrid","dateString","monthInterval","Interval","fromDateTimes","startOf","endOf","firstWeekOffset","start","weekday","lastWeekOffset","end","calendarInterval","minus","days","plus","totalDays","count","Array","_","startOffset","date","day","hasSame","includes","getMonthlyCalendarGridHelper","getFormattedDateReminders","dates","dateId","reminders","dateReminders","reduce","formatted","reminderId","dateMillis","fromMillis","TIME_SIMPLE","sort","a","b","MonthlyCalendarDateReminder","tabIndex","title","classNames","ownProps","e","stopPropagation","MonthlyCalendarGrid","config","Info","weekdaysFormat","weekDayIndex","DAYS_IN_A_WEEK","slice","getWeekdaysDescriptions","getFormattedReminder","time","millisToDateTimeStrings","ModalHeader","children","onClose","XIcon","ModalBackdrop","handleClick","target","ref","current","createRef","this","Component","ModalResponsive","FormTextInput","field","form","touched","errors","hasError","name","Boolean","FormDatePicker","FormErrorMessage","FormLabel","htmlFor","FormFieldset","BaseButton","FormActions","CheckIcon","FormTimePicker","ReminderColorCircle","colorName","fillRule","clipRule","ReminderColorPickerItem","role","ReminderColorPicker","open","toggleOpen","setState","prevState","close","handleOutsideClick","contains","handleSelectColor","onChange","value","renderColorList","filter","document","addEventListener","removeEventListener","ExpandIcon","GET_FORECAST","SET_FORECAST","RESET_FORECAST","getForecast","resetForecast","forecast","ChevronsUpIcon","ChevronsDownIcon","ReminderForecast","hasForecast","maxTemp","toFixed","minTemp","condition","icon","alt","src","ReminderForecastContainer","isValid","names","formik","keys","every","error","Formik","length","getFieldValue","getAllValues","prevProps","prevValues","currentValues","info","console","String","values","trim","WithFormik","forecastUISelectors","forecastUIActions","ReminderSchema","Yup","max","required","matches","ReminderForm","getInitialValues","handleSubmit","onSubmit","initialValues","validationSchema","component","placeholder","as","ReminderModal","isNew","setNavigationBarHeightCSSVariable","vh","window","innerHeight","documentElement","style","setProperty","App","local","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","errorMessage","SET_DATE_REMINDER","setDateReminder","filterDateReminders","reminderIdToExclude","filtered","existing","SET_REMINDER","setReminder","entry","from","Set","FORECAST_API_BASE_URL","REACT_APP_FORECAST_API_BASE_URL","FORECAST_API_KEY","REACT_APP_FORECAST_API_KEY","forecastAxiosClient","axios","create","baseURL","forecastError","handleApiError","response","data","message","getResponseErrorMessage","request","statusText","handleForecastResponse","forecasts","forecastday","isArray","find","Number","maxtemp_f","mintemp_f","avgTemp","avgtemp_f","code","forecastSuccess","getCityForecastForDate","diff","get","params","q","Math","ceil","isCancel","raceWithResetForecast","getForecastDebounced","watchGetForecast","effect","race","result","reset","take","call","forecastApi","put","delay","task","cancel","fork","generateUUID","random","toString","substring","watchNewReminder","watchEditReminder","watchSubmitReminder","reminderUIActions","apply","initialDateTime","parsed","set","toMillis","reminderToSet","timeString","dateReminder","takeEvery","keepAlive","rootSaga","sagas","all","saga","spawn","groupCollapsed","groupEnd","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e890d49a.chunk.js","sourcesContent":["export const SET_MONTH = 'UI/SET_MONTH';\n\nexport function setMonth(month) {\n  return {\n    type: SET_MONTH,\n    payload: month,\n  };\n}\n","export const DEFAULT_LOCALE = 'en-US';\nexport const APP_LOCALE = process.env.JC_CALENDAR_APP_LOCALE ?? DEFAULT_LOCALE;\n","import { DateTime, Info, Interval } from 'luxon';\nimport { APP_LOCALE } from '../config/locale';\n\nexport const DAYS_IN_A_WEEK = 7;\nexport const MONTH_FORMAT = 'yyyy-MM';\nexport const DATE_FORMAT = 'yyyy-MM-dd';\nexport const TIME_FORMAT = 'hh:mm';\n\nexport const DATE_REGEX = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\nexport const TIME_REGEX = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst SATURDAY_NUMBER = 7;\nconst SUNDAY_NUMBER = 1;\nconst weekendNumbers = Object.freeze([SATURDAY_NUMBER, SUNDAY_NUMBER]);\n\n/**\n * Convert the ISO week number to local week number.\n * That will make the week start from Sunday.\n * @param {number} isoWeekday ISO week number: from `1 - Monday` to `7 - Sunday`.\n */\nexport function toLocalWeekdayNumber(isoWeekday) {\n  return (isoWeekday % DAYS_IN_A_WEEK) + 1;\n}\n\n/**\n * Returns long, short, and narrow weekdays descriptions for the current `APP_LOCALE`.\n */\nexport function getWeekdaysDescriptions() {\n  const config = { locale: APP_LOCALE };\n  const long = Info.weekdaysFormat('long', config);\n  const short = Info.weekdaysFormat('short', config);\n  const narrow = Info.weekdaysFormat('narrow', config);\n\n  const weekDays = Array(DAYS_IN_A_WEEK)\n    .fill(null)\n    .map((_, weekDayIndex) => {\n      return {\n        long: long[weekDayIndex],\n        short: short[weekDayIndex],\n        narrow: narrow[weekDayIndex],\n      };\n    });\n\n  // luxon only return ISO weekdays order,\n  // and we want Sunday to be the first day.\n  return [\n    weekDays[DAYS_IN_A_WEEK - 1],\n    ...weekDays.slice(0, DAYS_IN_A_WEEK - 1),\n  ];\n}\n\n/**\n * Returns an array for the passed date's month with trailing dates for next/previous months.\n * The array represents a calendar that starts on Sunday and ends on Saturday.\n * @param {string} dateString The date (format: `yyyy-MM`) to generate the grid from.\n */\nexport function getMonthlyCalendarGrid(dateString) {\n  const month = DateTime.fromFormat(dateString, MONTH_FORMAT);\n\n  // Get the interval for the provided month\n  const monthInterval = Interval.fromDateTimes(\n    month.startOf('month'),\n    month.endOf('month')\n  );\n\n  // Get offsets for trailing months\n  const firstWeekOffset = toLocalWeekdayNumber(monthInterval.start.weekday) - 1;\n  const lastWeekOffset =\n    DAYS_IN_A_WEEK - toLocalWeekdayNumber(monthInterval.end.weekday);\n\n  // Get calendar with trailing intervals\n  const calendarInterval = Interval.fromDateTimes(\n    monthInterval.start.minus({\n      days: firstWeekOffset > 0 ? firstWeekOffset : 0,\n    }),\n    monthInterval.end.plus({ days: lastWeekOffset })\n  );\n\n  // Map the interval to an ordered dates array that represents a calendars month.\n  const totalDays = calendarInterval.count('days');\n  const start = calendarInterval.start;\n  return Array(totalDays)\n    .fill(null)\n    .map((_, startOffset) => {\n      const date = start.plus({ days: startOffset });\n      return {\n        key: date.toFormat(DATE_FORMAT),\n        text: date.toLocaleString({ locale: APP_LOCALE, day: 'numeric' }),\n        trailing: !month.hasSame(date, 'month'),\n        isWeekend: weekendNumbers.includes(toLocalWeekdayNumber(date.weekday)),\n      };\n    });\n}\n\n/**\n * Returns a localized formatted month and year string.\n * @param {string} monthString The month to get the key from.\n */\nexport function getDisplayMonthAndYear(monthString) {\n  return DateTime.fromFormat(monthString, MONTH_FORMAT).toLocaleString({\n    locale: APP_LOCALE,\n    year: 'numeric',\n    month: 'long',\n  });\n}\n\n/**\n * Returns a date string representation of the provided DateTime.\n * @param {DateTime} dateTime\n */\nexport function dateTimeToDateString(dateTime) {\n  return dateTime.toFormat(DATE_FORMAT, { locale: APP_LOCALE });\n}\n\n/**\n * Returns a time string representation of the provided DateTime.\n * @param {DateTime} date\n */\nexport function dateTimeToTimeString(dateTime) {\n  return dateTime.toLocaleString(DateTime.TIME_24_SIMPLE);\n}\n\n/**\n * Returns an object with keys `date`, and `time` from milliseconds of a date.\n * @param {number} dateMillis\n */\nexport function millisToDateTimeStrings(dateMillis) {\n  const dateTime = DateTime.fromMillis(dateMillis);\n\n  return {\n    date: dateTimeToDateString(dateTime),\n    time: dateTimeToTimeString(dateTime),\n  };\n}\n\n/**\n * Returns total milliseconds from a date and time.\n * @param {string} dateString\n * @param {string} timeString\n */\nexport function dateTimeStringsToMillis(dateString, timeString) {\n  return DateTime.fromFormat(\n    `${dateString} ${timeString}`,\n    `${DATE_FORMAT} ${TIME_FORMAT}`,\n    { locale: APP_LOCALE }\n  ).toMillis();\n}\n\nexport function getDisplayTimeFromMillis(dateMillis) {\n  return DateTime.fromMillis(dateMillis).toLocaleString({\n    ...DateTime.TIME_SIMPLE,\n    locale: APP_LOCALE,\n  });\n}\n","import { createSelector } from 'reselect';\nimport { getDisplayMonthAndYear as getDisplayMonthAndYearHelper } from '../../helpers/calendar';\n\nexport const getMonth = (state) => state.ui.month;\n\nexport const getDisplayMonthAndYear = createSelector([getMonth], (month) =>\n  month !== null ? getDisplayMonthAndYearHelper(month) : ''\n);\n","export const NEW_REMINDER = 'UI/NEW_REMINDER';\nexport const EDIT_REMINDER = 'UI/EDIT_REMINDER';\nexport const SUBMIT_REMINDER = 'UI/SUBMIT_REMINDER';\n\nexport const OPEN_REMINDER = 'UI/OPEN_REMINDER';\nexport const CLOSE_REMINDER = 'UI/CLOSE_REMINDER';\n\nexport function newReminder(initialDate) {\n  return {\n    type: NEW_REMINDER,\n    payload: initialDate,\n  };\n}\n\nexport function editReminder(reminder) {\n  return {\n    type: EDIT_REMINDER,\n    payload: reminder,\n  };\n}\n\nexport function submitReminder(reminder) {\n  return {\n    type: SUBMIT_REMINDER,\n    payload: reminder,\n  };\n}\n\nexport function openReminder(reminder) {\n  return {\n    type: OPEN_REMINDER,\n    payload: reminder,\n  };\n}\n\nexport function closeReminder() {\n  return {\n    type: CLOSE_REMINDER,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlusIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"25\"\n        viewBox=\"0 0 24 25\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M12 5.5V19.5\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M5 12.5H19\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nPlusIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default PlusIcon;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { newReminder } from '../actions/ui/reminder';\nimport { getDisplayMonthAndYear } from '../selectors/ui/month';\nimport PlusIcon from './icons/PlusIcon';\n\nfunction AppHeader({ month, newReminder }) {\n  return (\n    <div className=\"flex px-8 py-4 flex-row gap-4 flex-nowrap shadow-lg items-center\">\n      <div className=\"w-64\">\n        <button\n          onClick={() => newReminder()}\n          type=\"button\"\n          className=\"uppercase flex flex-row flex-nowrap items-center gap-2 p-3 lg:px-4 lg:py-2 shadow rounded-full lg:rounded text-lg font-medium bg-white hover:bg-gray-200 text-indigo-700 hover:text-indigo-900 transition-colors duration-150\"\n        >\n          <PlusIcon svgClassName=\"w-6 h-6\" />\n          <span className=\"hidden lg:inline\">New Reminder</span>\n        </button>\n      </div>\n\n      <h1 className=\"flex-grow text-center text-2xl font-medium\">{month}</h1>\n\n      <div className=\"w-64\" />\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    month: getDisplayMonthAndYear(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ newReminder }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppHeader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction MonthlyCalendarHeader({ weekDays }) {\n  return (\n    <div className=\"w-full flex-shrink p-1 bg-gradient-to-r from-indigo-700 to-purple-800 text-white shadow-md grid grid-cols-7 gap-1\">\n      {weekDays.map((weekDay) => (\n        <h3\n          key={weekDay.short}\n          className=\"px-2 py-2 text-xs sm:text-sm md:text-base lg:text-lg font-medium text-center flex items-center justify-center\"\n        >\n          <span className=\"hidden lg:inline\">{weekDay.long}</span>\n          <span className=\"hidden md:inline lg:hidden\">{weekDay.short}</span>\n          <span className=\"inline md:hidden\">{weekDay.narrow}</span>\n        </h3>\n      ))}\n    </div>\n  );\n}\n\nMonthlyCalendarHeader.propTypes = {\n  weekDays: PropTypes.arrayOf(\n    PropTypes.shape({\n      long: PropTypes.string.isRequired,\n      short: PropTypes.string.isRequired,\n      narrow: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MonthlyCalendarHeader;\n","export const DEFAULT_COLOR = 'indigo-600';\nexport const GRASS_GREEN = 'green-600';\nexport const RED_DANGER = 'red-500';\nexport const BRIGHT_PINK = 'pink-600';\nexport const SWEET_PURPLE = 'purple-500';\nexport const BRIGHT_YELLOW = 'yellow-400';\nexport const SKY_BLUE = 'blue-500';\n\nexport const ALL_COLORS = Object.freeze([\n  DEFAULT_COLOR,\n  GRASS_GREEN,\n  RED_DANGER,\n  BRIGHT_PINK,\n  SWEET_PURPLE,\n  BRIGHT_YELLOW,\n  SKY_BLUE,\n]);\n\nexport function getBackgroundColor(color) {\n  return `bg-${color}`;\n}\n\nexport function getTextColor(color) {\n  return `text-${color}`;\n}\n","import PropTypes from 'prop-types';\nimport { ALL_COLORS } from '../../../helpers/colors';\n\nexport const DatePropType = PropTypes.shape({\n  key: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  trailing: PropTypes.bool.isRequired,\n  isWeekend: PropTypes.bool.isRequired,\n});\n\nexport const DateReminderPropType = PropTypes.shape({\n  id: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  color: PropTypes.oneOf(ALL_COLORS).isRequired,\n  dateTime: PropTypes.number.isRequired,\n  displayTime: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n});\n","import { createSelector } from 'reselect';\nimport {\n  getDisplayTimeFromMillis,\n  getMonthlyCalendarGrid as getMonthlyCalendarGridHelper,\n} from '../../helpers/calendar';\nimport { getDateReminders } from '../dates';\nimport { getReminders } from '../reminders';\nimport { getMonth } from './month';\n\nexport const getMonthlyCalendarGrid = createSelector([getMonth], (month) => {\n  return month !== null ? getMonthlyCalendarGridHelper(month) : [];\n});\n\nexport const getFormattedDateReminders = createSelector(\n  [getDateReminders, getReminders],\n  (dateReminders, reminders) => {\n    if (!dateReminders || !reminders) return [];\n\n    return dateReminders\n      .reduce((formatted, reminderId) => {\n        const reminder = reminders[reminderId];\n        return reminder\n          ? [\n              ...formatted,\n              {\n                ...reminder,\n                displayTime: getDisplayTimeFromMillis(reminder.dateTime),\n              },\n            ]\n          : formatted;\n      }, [])\n      .sort((a, b) => a.dateTime - b.dateTime);\n  }\n);\n","export const getDateReminders = (state, props) =>\n  state.dates?.[props.dateId]?.reminders;\n","export const getReminders = (state) => state.reminders;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { DateReminderPropType } from '../shared/prop-types/date';\nimport { getBackgroundColor, getTextColor } from '../../helpers/colors';\n\nfunction MonthlyCalendarDateReminder({ reminder, onClick }) {\n  return (\n    <li\n      tabIndex={0}\n      onClick={onClick}\n      title={`${reminder.displayTime} - ${reminder.description}\\nClick to Edit.`}\n      className={classNames(\n        'py-px hover:bg-gray-200 text-gray-900 rounded cursor-pointer text-xs font-normal truncate flex flex-row flex-nowrap items-center gap-2',\n        `hover:${getTextColor(reminder.color)}`\n      )}\n    >\n      <div\n        className={classNames(\n          'w-2 h-2 rounded-full flex-shrink-0',\n          getBackgroundColor(reminder.color)\n        )}\n      />\n      {reminder.displayTime} - {reminder.description}\n    </li>\n  );\n}\n\nMonthlyCalendarDateReminder.propTypes = {\n  reminder: DateReminderPropType.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default MonthlyCalendarDateReminder;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { DatePropType, DateReminderPropType } from '../shared/prop-types/date';\nimport { getFormattedDateReminders } from '../../selectors/ui/calendar';\nimport { editReminder, newReminder } from '../../actions/ui/reminder';\nimport MonthlyCalendarDateReminder from './MonthlyCalendarDateReminder';\n\nfunction MonthlyCalendarDate({ date, reminders, editReminder, newReminder }) {\n  return (\n    <li\n      key={date.key}\n      onClick={() => newReminder(date.key)}\n      className={classNames(\n        'h-auto px-3 py-2 bg-white text-lg overflow-hidden',\n        {\n          'font-normal': !date.isWeekend,\n          'text-indigo-600 font-bold': date.isWeekend && !date.trailing,\n          'text-gray-400': date.trailing,\n        }\n      )}\n    >\n      {date.text}\n\n      <ol>\n        {reminders.map((reminder) => (\n          <MonthlyCalendarDateReminder\n            key={reminder.id}\n            reminder={reminder}\n            onClick={(e) => {\n              e.stopPropagation();\n              editReminder(reminder);\n            }}\n          />\n        ))}\n      </ol>\n    </li>\n  );\n}\n\nMonthlyCalendarDate.propTypes = {\n  date: DatePropType.isRequired,\n  reminders: PropTypes.arrayOf(DateReminderPropType.isRequired).isRequired,\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    reminders: getFormattedDateReminders(state, { dateId: ownProps.date.key }),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ editReminder, newReminder }, dispatch);\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MonthlyCalendarDate);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DatePropType } from '../shared/prop-types/date';\nimport MonthlyCalendarDate from './MonthlyCalendarDate';\n\nfunction MonthlyCalendarGrid({ dates }) {\n  return (\n    <ol className=\"w-full flex-grow overflow-y-auto px-1 pt-0 pb-1 bg-gray-200 grid grid-cols-7 auto-rows-fr gap-1\">\n      {dates.map((date) => (\n        <MonthlyCalendarDate key={date.key} date={date} />\n      ))}\n    </ol>\n  );\n}\n\nMonthlyCalendarGrid.propTypes = {\n  dates: PropTypes.arrayOf(DatePropType.isRequired).isRequired,\n};\n\nexport default MonthlyCalendarGrid;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getWeekdaysDescriptions } from '../../helpers/calendar';\nimport MonthlyCalendarHeader from './MonthlyCalendarHeader';\nimport MonthlyCalendarGrid from './MonthlyCalendarGrid';\nimport { getMonthlyCalendarGrid } from '../../selectors/ui/calendar';\n\n// As the user can't change the locale, keep this 'cached'.\nconst weekDays = getWeekdaysDescriptions();\n\nfunction MonthlyCalendar({ dates }) {\n  return (\n    <div className=\"w-full flex-grow overflow-hidden flex flex-col\">\n      <MonthlyCalendarHeader weekDays={weekDays} />\n      <MonthlyCalendarGrid dates={dates} />\n    </div>\n  );\n}\n\nfunction mapStateToProps(state, props) {\n  const dates = getMonthlyCalendarGrid(state);\n\n  return {\n    ...props,\n    dates,\n  };\n}\n\nexport default connect(mapStateToProps)(MonthlyCalendar);\n","import { createSelector } from 'reselect';\nimport { millisToDateTimeStrings } from '../../helpers/calendar';\n\nexport const getReminder = (state) => state.ui.reminder;\n\nexport const getFormattedReminder = createSelector(\n  [getReminder],\n  (reminder) => {\n    if (!reminder) return null;\n\n    return {\n      id: reminder.id,\n      description: reminder.description,\n      color: reminder.color,\n      city: reminder.city,\n      ...millisToDateTimeStrings(reminder.dateTime),\n    };\n  }\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlusIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M18 6L6 18\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M6 6L18 18\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nPlusIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default PlusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport XIcon from '../../icons/XIcon';\n\nfunction ModalHeader({ children, onClose }) {\n  return (\n    <div className=\"flex flex-row flex-nowrap items-center justify-between\">\n      <div className=\"truncate\">{children}</div>\n      <button type=\"button\" className=\"p-1\" onClick={onClose}>\n        <XIcon svgClassName=\"w-6 h-6\" />\n      </button>\n    </div>\n  );\n}\n\nModalHeader.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ModalHeader;\n","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ModalBackdrop extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    onClick: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.ref = createRef();\n  }\n\n  handleClick = (e) => {\n    if (e.target === this.ref.current) {\n      this.props.onClick();\n    }\n  };\n\n  render() {\n    return (\n      <div\n        ref={this.ref}\n        onClick={this.handleClick}\n        className=\"fixed top-0 left-0 flex flex-col lg:py-28 h-full w-full bg-black z-20 bg-opacity-30\"\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default ModalBackdrop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ModalBackdrop from './ModalBackdrop';\n\nfunction ModalResponsive({ children, onClose }) {\n  return (\n    <ModalBackdrop onClick={onClose}>\n      <div className=\"z-30 mx-auto w-full lg:max-w-2xl h-auto flex-grow lg:flex-grow-0 overflow-hidden overflow-y-scroll bg-white lg:shadow-lg lg:rounded-md\">\n        {children}\n      </div>\n    </ModalBackdrop>\n  );\n}\n\nModalResponsive.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ModalResponsive;\n","import React from 'react';\nimport classNames from 'classnames';\n\n// Should be used with Formik.Field component prop\nfunction FormTextInput({\n  field,\n  form: { touched, errors },\n  className,\n  ...props\n}) {\n  const hasError = touched[field.name] && Boolean(errors[field.name]);\n\n  return (\n    <input\n      type=\"text\"\n      className={classNames(\n        'placeholder-gray-400 bg-white border border-gray-300 focus:ring-indigo-500 focus:border-indigo-500 block w-auto shadow-sm rounded-md',\n        {\n          'ring-2 ring-red-500': hasError,\n        },\n        className\n      )}\n      {...field}\n      {...props}\n    />\n  );\n}\n\nexport default FormTextInput;\n","import React from 'react';\nimport classNames from 'classnames';\n\n// Should be used with Formik.Field component prop\nfunction FormDatePicker({\n  field,\n  form: { touched, errors },\n  className,\n  ...props\n}) {\n  const hasError = touched[field.name] && Boolean(errors[field.name]);\n\n  return (\n    <input\n      type=\"date\"\n      className={classNames(\n        'placeholder-gray-400 bg-white border border-gray-300 focus:ring-indigo-500 focus:border-indigo-500 block shadow-sm rounded-md',\n        {\n          'ring-2 ring-red-500': hasError,\n        },\n        className\n      )}\n      {...field}\n      {...props}\n    />\n  );\n}\n\nexport default FormDatePicker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormErrorMessage({ children }) {\n  return (\n    <div className=\"text-xs sm:text-sm block text-red-500\">{children}</div>\n  );\n}\n\nFormErrorMessage.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default FormErrorMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormLabel({ children, htmlFor }) {\n  return (\n    <label htmlFor={htmlFor} className=\"block font-medium text-gray-700 \">\n      {children}\n    </label>\n  );\n}\n\nFormLabel.propTypes = {\n  children: PropTypes.string.isRequired,\n  htmlFor: PropTypes.string.isRequired,\n};\n\nexport default FormLabel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormFieldset({ children }) {\n  return <div className=\"flex flex-col gap-1\">{children}</div>;\n}\n\nFormFieldset.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default FormFieldset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nfunction BaseButton({ children, className, ...props }) {\n  return (\n    <button\n      type=\"button\"\n      className={classNames(\n        'uppercase w-full sm:w-auto flex flex-row flex-nowrap items-center justify-center gap-2 px-4 py-2 shadow rounded text-lg font-medium transition-colors duration-150',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n}\n\nBaseButton.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n};\n\nexport default BaseButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction FormActions({ children }) {\n  return (\n    <div className=\"mt-4 flex flex-row flex-wrap items-center justify-end\">\n      {children}\n    </div>\n  );\n}\n\nFormActions.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default FormActions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CheckIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M20 6L9 17L4 12\"\n          stroke=\"white\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nCheckIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default CheckIcon;\n","import React from 'react';\nimport classNames from 'classnames';\n\n// Should be used with Formik.Field component prop\nfunction FormTimePicker({\n  field,\n  form: { touched, errors },\n  className,\n  ...props\n}) {\n  const hasError = touched[field.name] && Boolean(errors[field.name]);\n\n  return (\n    <input\n      type=\"time\"\n      className={classNames(\n        'placeholder-gray-400 bg-white border border-gray-300 focus:ring-indigo-500 focus:border-indigo-500 block shadow-sm rounded-md',\n        {\n          'ring-2 ring-red-500': hasError,\n        },\n        className\n      )}\n      {...field}\n      {...props}\n    />\n  );\n}\n\nexport default FormTimePicker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { getBackgroundColor } from '../../helpers/colors';\n\nfunction ReminderColorCircle({ colorName }) {\n  return (\n    <div\n      className={classNames(\n        'w-6 h-6 rounded-full',\n        getBackgroundColor(colorName)\n      )}\n    >\n      <span className=\"sr-only\">Color: {colorName}</span>\n    </div>\n  );\n}\n\nReminderColorCircle.propTypes = {\n  colorName: PropTypes.string.isRequired,\n};\n\nexport default ReminderColorCircle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlusIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"20\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        fill=\"currentColor\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\"\n          clipRule=\"evenodd\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nPlusIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default PlusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReminderColorCircle from './ReminderColorCircle';\n\nfunction ReminderColorPickerItem({ colorName, onClick }) {\n  return (\n    <li\n      tabIndex=\"0\"\n      id=\"listbox-item-0\"\n      role=\"option\"\n      aria-selected={false}\n      className=\"cursor-pointer select-none relative p-2 transition duration-200 hover:bg-indigo-100\"\n      onClick={onClick}\n    >\n      <div className=\"flex items-center justify-center\">\n        <ReminderColorCircle colorName={colorName} />\n      </div>\n    </li>\n  );\n}\n\nReminderColorPickerItem.propTypes = {\n  colorName: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ReminderColorPickerItem;\n","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ReminderColorCircle from './ReminderColorCircle';\nimport ExpandIcon from '../icons/ExpandIcon';\nimport { ALL_COLORS } from '../../helpers/colors';\nimport ReminderColorPickerItem from './ReminderColorPickerItem';\n\n// Should be used with Formik.Field `as` prop\nclass ReminderColorPicker extends Component {\n  static propTypes = {\n    value: PropTypes.oneOf(ALL_COLORS).isRequired,\n    onBlur: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.ref = createRef();\n  }\n\n  state = {\n    open: false,\n  };\n\n  toggleOpen = () => {\n    this.setState((prevState) => ({\n      open: !prevState.open,\n    }));\n  };\n\n  close = () => {\n    this.setState(() => ({\n      open: false,\n    }));\n  };\n\n  handleOutsideClick = (e) => {\n    if (this.ref.current !== null && !this.ref.current.contains(e.target)) {\n      this.close();\n    }\n  };\n\n  handleSelectColor = (colorName) => {\n    this.props.onChange({\n      target: {\n        name: this.props.name,\n        value: colorName,\n      },\n    });\n    this.close();\n  };\n\n  renderColorList = () => {\n    const { value } = this.props;\n\n    return (\n      <div className=\"absolute mt-1 w-full rounded-md bg-white shadow-lg\">\n        <ul\n          tabIndex=\"0\"\n          role=\"listbox\"\n          aria-labelledby=\"listbox-label\"\n          aria-activedescendant=\"listbox-item-3\"\n          className=\"max-h-56 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\"\n        >\n          {ALL_COLORS.filter((color) => color !== value).map((colorName) => (\n            <ReminderColorPickerItem\n              key={colorName}\n              colorName={colorName}\n              onClick={() => this.handleSelectColor(colorName)}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  componentDidMount() {\n    document.addEventListener('click', this.handleOutsideClick);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleOutsideClick);\n  }\n\n  render() {\n    const { className, name, value } = this.props;\n\n    return (\n      <div ref={this.ref} name={name} className=\"relative\">\n        <button\n          type=\"button\"\n          aria-haspopup=\"listbox\"\n          aria-expanded=\"true\"\n          aria-labelledby=\"listbox-label\"\n          className={classNames(\n            'relative w-auto bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm',\n            className\n          )}\n          onClick={this.toggleOpen}\n        >\n          <span className=\"flex items-center\">\n            <ReminderColorCircle colorName={value} />\n          </span>\n          <span className=\"ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n            <ExpandIcon svgClassName=\"h-5 w-5 text-gray-400\" />\n          </span>\n        </button>\n\n        {this.state.open && this.renderColorList()}\n      </div>\n    );\n  }\n}\n\nexport default ReminderColorPicker;\n","export const GET_FORECAST = 'UI/GET_FORECAST';\nexport const SET_FORECAST = 'UI/SET_FORECAST';\nexport const RESET_FORECAST = 'UI/RESET_FORECAST';\n\nexport function getForecast({ city, date }) {\n  return {\n    type: GET_FORECAST,\n    payload: { city, date },\n  };\n}\n\nexport function setForecast(forecast) {\n  return {\n    type: SET_FORECAST,\n    payload: forecast,\n  };\n}\n\nexport function resetForecast() {\n  return {\n    type: RESET_FORECAST,\n  };\n}\n","import PropTypes from 'prop-types';\nimport { ALL_COLORS } from '../../../helpers/colors';\n\nexport const ReminderPropType = PropTypes.shape({\n  id: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  color: PropTypes.oneOf(ALL_COLORS).isRequired,\n  date: PropTypes.string.isRequired,\n  time: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n});\n","export const getForecast = (state) => state.ui.forecast?.forecast;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ChevronsUpIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"25\"\n        viewBox=\"0 0 24 25\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M17 11.5L12 6.5L7 11.5\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M17 18.5L12 13.5L7 18.5\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nChevronsUpIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default ChevronsUpIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ChevronsDownIcon = (props) => {\n  return (\n    <i className={props.className}>\n      <svg\n        className={props.svgClassName}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n      >\n        <path\n          d=\"M7 13L12 18L17 13\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M7 6L12 11L17 6\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </i>\n  );\n};\n\nChevronsDownIcon.propTypes = {\n  className: PropTypes.string,\n  svgClassName: PropTypes.string,\n};\n\nexport default ChevronsDownIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ChevronsUpIcon from '../../icons/ChevronsUpIcon';\nimport ChevronsDownIcon from '../../icons/ChevronsDownIcon';\n\nfunction ReminderForecast({ forecast }) {\n  const hasForecast = Boolean(forecast);\n\n  return (\n    <div\n      className={classNames('w-full h-auto transition-all duration-1000', {\n        'max-h-96 opacity-100': hasForecast,\n        'max-h-0 opacity-0': !hasForecast,\n      })}\n    >\n      {hasForecast && (\n        <div className=\"border border-gray-300 rounded-md p-4 flex flex-row flex-wrap gap-x-12 gap-y-4 items-center\">\n          <div className=\"flex flex-col gap-2 justify-center items-end\">\n            {forecast.maxTemp && (\n              <div className=\"flex gap-1 items-start\">\n                <p title=\"Max. Temp.\" className=\"text-3xl font-medium\">\n                  {forecast.maxTemp.toFixed(1)}&deg;F\n                </p>\n                <ChevronsUpIcon svgClassName=\"w-6 h-6\" />\n              </div>\n            )}\n            {forecast.minTemp && (\n              <div className=\"flex gap-1 items-center text-gray-700\">\n                <p title=\"Min. Temp.\" className=\"text-2xl\">\n                  {forecast.minTemp.toFixed(1)}&deg;F\n                </p>\n                <ChevronsDownIcon svgClassName=\"w-5 h-5\" />\n              </div>\n            )}\n          </div>\n\n          {forecast.condition?.text && (\n            <div className=\"flex flex-row gap-2 items-center justify-start\">\n              {forecast.condition?.icon && (\n                <img\n                  alt={forecast.condition.text}\n                  src={forecast.condition.icon}\n                  className=\"w-16 h-16\"\n                />\n              )}\n              <p title=\"Condition\" className=\"text-xl font-medium\">\n                {forecast.condition.text}\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nReminderForecast.propTypes = {\n  forecast: PropTypes.shape({\n    maxTemp: PropTypes.number,\n    minTemp: PropTypes.number,\n    avgTemp: PropTypes.number,\n    condition: PropTypes.shape({\n      text: PropTypes.string,\n      icon: PropTypes.string,\n    }).isRequired,\n  }),\n};\n\nexport default ReminderForecast;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Formik from 'formik';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as forecastUIActions from '../../../actions/ui/forecast';\nimport * as forecastUISelectors from '../../../selectors/ui/forecast';\nimport ReminderForecast from './ReminderForecast';\n\nclass ReminderForecastContainer extends Component {\n  static propTypes = {\n    names: PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n    }).isRequired,\n  };\n\n  static getFieldValue(name, formik) {\n    return String(Formik.getIn(formik.values, name)).trim();\n  }\n\n  static getAllValues = (names, formik) => {\n    return {\n      city: ReminderForecastContainer.getFieldValue(names.city, formik),\n      date: ReminderForecastContainer.getFieldValue(names.date, formik),\n    };\n  };\n\n  isValid = () => {\n    const { names, formik } = this.props;\n\n    return Object.keys(names).every((name) => {\n      const error = Formik.getIn(formik.errors, name);\n      return (\n        (typeof error === 'undefined' || Object.keys(error).length === 0) &&\n        ReminderForecastContainer.getFieldValue(name, formik).length !== 0\n      );\n    });\n  };\n\n  componentDidMount() {\n    if (this.isValid()) {\n      this.props.getForecast(\n        ReminderForecastContainer.getAllValues(\n          this.props.names,\n          this.props.formik\n        )\n      );\n    } else {\n      this.props.resetForecast();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevValues = ReminderForecastContainer.getAllValues(\n      prevProps.names,\n      prevProps.formik\n    );\n    const currentValues = ReminderForecastContainer.getAllValues(\n      this.props.names,\n      this.props.formik\n    );\n\n    if (\n      prevValues.city !== currentValues.city ||\n      prevValues.date !== currentValues.date\n    ) {\n      if (this.isValid()) {\n        this.props.getForecast(currentValues);\n      } else {\n        this.props.resetForecast();\n      }\n    }\n  }\n\n  componentDidCatch(error, info) {\n    console.error('Uncaught error in forecast container component', {\n      error,\n      info,\n    });\n  }\n\n  render() {\n    return <ReminderForecast forecast={this.props.forecast} />;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    forecast: forecastUISelectors.getForecast(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      getForecast: forecastUIActions.getForecast,\n      resetForecast: forecastUIActions.resetForecast,\n    },\n    dispatch\n  );\n}\n\nconst WithFormik = Formik.connect(ReminderForecastContainer);\nexport default connect(mapStateToProps, mapDispatchToProps)(WithFormik);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormTextInput from '../shared/forms/FormTextInput';\nimport FormDatePicker from '../shared/forms/FormDatePicker';\nimport FormErrorMessage from '../shared/forms/FormErrorMessage';\nimport FormLabel from '../shared/forms/FormLabel';\nimport FormFieldset from '../shared/forms/FormFieldset';\nimport BaseButton from '../shared/buttons/BaseButton';\nimport FormActions from '../shared/forms/FormActions';\nimport CheckIcon from '../icons/CheckIcon';\nimport {\n  DATE_FORMAT,\n  DATE_REGEX,\n  TIME_FORMAT,\n  TIME_REGEX,\n} from '../../helpers/calendar';\nimport FormTimePicker from '../shared/forms/FormTimePicker';\nimport ReminderColorPicker from './ReminderColorPicker';\nimport { ALL_COLORS } from '../../helpers/colors';\nimport { ReminderPropType } from '../shared/prop-types/reminder';\nimport ReminderForecastContainer from './forecast/ReminderForecastContainer';\n\nconst ReminderSchema = Yup.object().shape({\n  description: Yup.string()\n    .max(30, 'No more than 30 character, please.')\n    .required('Please describe your reminder (max. 30 characters).'),\n  color: Yup.string()\n    .oneOf(ALL_COLORS, 'Color is invalid.')\n    .required('Please inform a color.'),\n  date: Yup.string()\n    .matches(DATE_REGEX, `Date must be valid (${DATE_FORMAT}).`)\n    .required('Please inform the day you want to get reminded.'),\n  time: Yup.string()\n    .matches(TIME_REGEX, `Time must be valid (${TIME_FORMAT}).`)\n    .required('Please inform the time of the day you want to get reminded.'),\n});\n\nclass ReminderForm extends Component {\n  static propTypes = {\n    reminder: ReminderPropType.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  getInitialValues = () => {\n    const { description, color, date, time, city } = this.props.reminder;\n\n    return {\n      description,\n      color,\n      date,\n      time,\n      city: city,\n    };\n  };\n\n  handleSubmit = (values) => {\n    this.props.onSubmit({\n      id: this.props.reminder.id,\n      description: values.description,\n      color: values.color,\n      city: values.city,\n      date: values.date,\n      time: values.time,\n    });\n  };\n\n  render() {\n    return (\n      <Formik\n        initialValues={this.getInitialValues()}\n        validationSchema={ReminderSchema}\n        onSubmit={this.handleSubmit}\n      >\n        <Form className=\"w-full flex flex-col gap-3\">\n          <FormFieldset>\n            <FormLabel htmlFor=\"description\">\n              What do you want to remember?\n            </FormLabel>\n            <div className=\"flex flex-row flex-wrap gap-2\">\n              <Field\n                id=\"description\"\n                name=\"description\"\n                component={FormTextInput}\n                placeholder=\"e.g.: Buy milk\"\n                className=\"flex-grow\"\n              />\n              <Field\n                name=\"color\"\n                as={ReminderColorPicker}\n                className=\"flex-shrink\"\n              />\n            </div>\n            <ErrorMessage component={FormErrorMessage} name=\"description\" />\n            <ErrorMessage component={FormErrorMessage} name=\"color\" />\n          </FormFieldset>\n\n          <FormFieldset>\n            <FormLabel htmlFor=\"date\">When?</FormLabel>\n\n            <div className=\"flex flex-row flex-wrap gap-2\">\n              <Field\n                id=\"date\"\n                name=\"date\"\n                component={FormDatePicker}\n                className=\"flex-grow\"\n              />\n              <Field\n                id=\"time\"\n                name=\"time\"\n                component={FormTimePicker}\n                className=\"w-full sm:w-44\"\n              />\n            </div>\n            <ErrorMessage component={FormErrorMessage} name=\"date\" />\n            <ErrorMessage component={FormErrorMessage} name=\"time\" />\n          </FormFieldset>\n\n          <FormFieldset>\n            <FormLabel htmlFor=\"city\">Where?</FormLabel>\n            <Field\n              id=\"city\"\n              name=\"city\"\n              component={FormTextInput}\n              placeholder=\"e.g.: New York City\"\n            />\n            <ErrorMessage component={FormErrorMessage} name=\"city\" />\n          </FormFieldset>\n\n          <ReminderForecastContainer names={{ city: 'city', date: 'date' }} />\n\n          <FormActions>\n            <BaseButton\n              type=\"submit\"\n              className=\"bg-indigo-700 hover:bg-indigo-500 text-white\"\n            >\n              <CheckIcon svgClassName=\"w-6 h-6\" />\n              Confirm\n            </BaseButton>\n          </FormActions>\n        </Form>\n      </Formik>\n    );\n  }\n}\n\nexport default ReminderForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ModalHeader from '../shared/modal/ModalHeader';\nimport ModalResponsive from '../shared/modal/ModalResponsive';\nimport ReminderForm from './ReminderForm';\nimport { ReminderPropType } from '../shared/prop-types/reminder';\n\nclass ReminderModal extends Component {\n  render() {\n    const { reminder, onClose, onSubmit } = this.props;\n    const isNew = !Boolean(reminder.id);\n\n    return (\n      <ModalResponsive onClose={onClose}>\n        <div className=\"w-full h-full overflow-y-auto p-8 flex flex-col gap-8\">\n          <ModalHeader onClose={onClose}>\n            <h2 className=\"uppercase font-medium text-xl\">\n              {isNew ? 'New' : 'Edit'} Reminder\n            </h2>\n          </ModalHeader>\n\n          <ReminderForm reminder={reminder} onSubmit={onSubmit} />\n        </div>\n      </ModalResponsive>\n    );\n  }\n}\n\nReminderModal.propTypes = {\n  reminder: ReminderPropType.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ReminderModal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { closeReminder, submitReminder } from '../../actions/ui/reminder';\nimport { getFormattedReminder } from '../../selectors/ui/reminder';\nimport ReminderModal from './ReminderModal';\n\nfunction ReminderContainer({ reminder, closeReminder, submitReminder }) {\n  if (!reminder) return null;\n\n  return (\n    <ReminderModal\n      reminder={reminder}\n      onClose={closeReminder}\n      onSubmit={submitReminder}\n    />\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    reminder: getFormattedReminder(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ closeReminder, submitReminder }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReminderContainer);\n","import React, { Component } from 'react';\nimport { DateTime } from 'luxon';\nimport { connect } from 'react-redux';\nimport { setMonth } from '../actions/ui/month';\nimport { getMonth } from '../selectors/ui/month';\nimport AppHeader from './AppHeader';\nimport MonthlyCalendar from './calendar/MonthlyCalendar';\nimport ReminderContainer from './reminders/ReminderContainer';\n\nfunction setNavigationBarHeightCSSVariable() {\n  const vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--vh', vh + 'px');\n}\n\nclass App extends Component {\n  componentDidMount() {\n    window.addEventListener('resize', setNavigationBarHeightCSSVariable);\n\n    if (this.props.month === null) {\n      this.props.dispatch(setMonth(DateTime.local().toFormat('yyyy-MM')));\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', setNavigationBarHeightCSSVariable);\n  }\n\n  render() {\n    return (\n      <div className=\"font-montserrat overflow-hidden bg-gray-50 text-gray-900\">\n        <div className=\"w-9/12 h-9/12 flex flex-col\">\n          <AppHeader />\n          <MonthlyCalendar />\n          <ReminderContainer />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  return {\n    ...props,\n    month: getMonth(state),\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport month from './month';\nimport reminder from './reminder';\nimport forecast from './forecast';\n\nexport default combineReducers({\n  month,\n  reminder,\n  forecast,\n});\n","import { SET_MONTH } from '../../actions/ui/month';\n\nexport default function month(state = null, action) {\n  switch (action.type) {\n    case SET_MONTH:\n      return action.payload;\n\n    default:\n      return state;\n  }\n}\n","import { OPEN_REMINDER, CLOSE_REMINDER } from '../../actions/ui/reminder';\n\nexport default function reminder(state = null, action) {\n  switch (action.type) {\n    case OPEN_REMINDER:\n      return action.payload;\n\n    case CLOSE_REMINDER:\n      return null;\n\n    default:\n      return state;\n  }\n}\n","import { RESET_FORECAST, SET_FORECAST } from '../../actions/ui/forecast';\n\nexport default function forecast(\n  state = { errorMessage: null, forecast: null },\n  action\n) {\n  switch (action.type) {\n    case SET_FORECAST:\n      return action.payload;\n\n    case RESET_FORECAST:\n      return { errorMessage: null, forecast: null };\n\n    default:\n      return state;\n  }\n}\n","export const SET_DATE_REMINDER = 'ADD_DATE_REMINDER';\n\nexport function setDateReminder({ date, reminderId }) {\n  return {\n    type: SET_DATE_REMINDER,\n    payload: {\n      date,\n      reminderId,\n    },\n  };\n}\n","import { SET_DATE_REMINDER } from '../actions/dates';\n\nfunction filterDateReminders(dates, reminderIdToExclude) {\n  return Object.values(dates).reduce((filtered, existing) => {\n    return {\n      ...filtered,\n      [existing.id]: {\n        ...existing,\n        reminders: existing.reminders.filter(\n          (reminderId) => reminderId !== reminderIdToExclude\n        ),\n      },\n    };\n  }, {});\n}\n\nexport default function dates(state = {}, action) {\n  switch (action.type) {\n    case SET_DATE_REMINDER:\n      const entry = state[action.payload.date] ?? {\n        id: action.payload.date,\n        reminders: [],\n      };\n\n      return {\n        ...filterDateReminders(state, action.payload.reminderId),\n        [entry.id]: {\n          ...entry,\n          reminders: Array.from(\n            new Set([...entry.reminders, action.payload.reminderId])\n          ),\n        },\n      };\n\n    default:\n      return state;\n  }\n}\n","export const SET_REMINDER = 'SET_REMINDER';\n\nexport function setReminder(reminder) {\n  return {\n    type: SET_REMINDER,\n    payload: reminder,\n  };\n}\n","import { combineReducers } from 'redux';\nimport ui from './ui';\nimport dates from './dates';\nimport reminders from './reminders';\n\nexport default combineReducers({\n  ui,\n  dates,\n  reminders,\n});\n","import { SET_REMINDER } from '../actions/reminders';\n\nexport default function reminders(state = {}, action) {\n  switch (action.type) {\n    case SET_REMINDER:\n      return {\n        ...state,\n        [action.payload.id]: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","export const FORECAST_API_BASE_URL =\n  process.env.REACT_APP_FORECAST_API_BASE_URL ??\n  'https://api.weatherapi.com/v1';\n","export const FORECAST_API_KEY = process.env.REACT_APP_FORECAST_API_KEY;\n","import axios from 'axios';\nimport { DateTime } from 'luxon';\nimport { FORECAST_API_BASE_URL } from '../../config/endpoints';\nimport { FORECAST_API_KEY } from '../../config/keys';\nimport { DATE_FORMAT } from '../../helpers/calendar';\n\nconst forecastAxiosClient = axios.create({\n  baseURL: FORECAST_API_BASE_URL,\n});\n\nconst MAX_DAYS_FOR_FORECAST = 10;\n\nfunction forecastEmpty() {\n  return { errorMessage: null, forecast: null };\n}\n\nfunction forecastError(error) {\n  return {\n    errorMessage: `An unexpected error ocurred while trying to get forecast data: \"${error}\".`,\n    forecast: null,\n  };\n}\n\nfunction forecastSuccess(data) {\n  return {\n    errorMessage: null,\n    forecast: {\n      maxTemp: Number(data.maxtemp_f) || null,\n      minTemp: Number(data.mintemp_f) || null,\n      avgTemp: Number(data.avgtemp_f) || null,\n      condition: {\n        code: String(data.condition?.code) || null,\n        text: String(data.condition?.text) || null,\n        icon: String(data.condition?.icon) || null,\n      },\n    },\n  };\n}\n\nfunction getResponseErrorMessage(response) {\n  return response.data?.error?.message;\n}\n\nfunction handleApiError(error) {\n  if (error.response) {\n    return forecastError(getResponseErrorMessage(error.response));\n  } else if (error.request) {\n    return forecastError(error.request.statusText);\n  } else {\n    return forecastError(error.message);\n  }\n}\n\nfunction handleForecastResponse(response, date) {\n  const forecasts = response?.data?.forecast?.forecastday;\n  if (!Array.isArray(forecasts)) return forecastEmpty();\n\n  const forecast = forecasts.find((forecast) => forecast?.date === date);\n  if (!forecast?.day) return forecastEmpty();\n\n  return forecastSuccess(forecast.day);\n}\n\n/**\n * Returns the forecast for the city.\n * If the date is invalid, in the past, or past 10 days from now: the returned value will be `null`.\n * @param {string} city The name of the city to query the forecast for.\n * @param {string} dateString The date string to query the forecast for. Expected format: `yyyy-MM-dd`.\n */\nexport async function getCityForecastForDate(city, dateString) {\n  const dateTime = DateTime.fromFormat(dateString, DATE_FORMAT).startOf('day');\n  if (!dateTime.isValid) return forecastEmpty();\n\n  const diff = dateTime.diff(DateTime.local().startOf('day'), 'days').days;\n  if (diff > MAX_DAYS_FOR_FORECAST || diff < 0) return forecastEmpty();\n\n  try {\n    const response = await forecastAxiosClient.get('forecast.json', {\n      params: {\n        key: FORECAST_API_KEY,\n        q: city,\n        days: Math.ceil(diff) + 1,\n      },\n    });\n    return handleForecastResponse(response, dateString);\n  } catch (error) {\n    return axios.isCancel(error) ? forecastEmpty() : handleApiError(error);\n  }\n}\n","import { call, cancel, delay, fork, put, race, take } from 'redux-saga/effects';\nimport * as forecastUIActions from '../../actions/ui/forecast';\nimport * as forecastApi from '../../infra/api/forecast';\n\nexport function* raceWithResetForecast(effect) {\n  return yield race({\n    result: effect,\n    reset: take(forecastUIActions.RESET_FORECAST),\n  });\n}\n\nexport function* getForecast(action) {\n  const { result, reset } = yield raceWithResetForecast(\n    call(\n      forecastApi.getCityForecastForDate,\n      action.payload.city,\n      action.payload.date\n    )\n  );\n  if (!reset) {\n    yield put(forecastUIActions.setForecast(result));\n  }\n}\n\nexport function* getForecastDebounced(action) {\n  const { reset } = yield raceWithResetForecast(delay(1000));\n  if (!reset) {\n    yield getForecast(action);\n  }\n}\n\nexport function* watchGetForecast() {\n  let task;\n  while (true) {\n    const action = yield take(forecastUIActions.GET_FORECAST);\n    if (task) {\n      yield cancel(task);\n    }\n    task = yield fork(getForecastDebounced, action);\n  }\n}\n","export function generateUUID() {\n  return (\n    Math.random().toString(36).substring(2, 15) +\n    Math.random().toString(36).substring(2, 15)\n  );\n}\n","import { DateTime } from 'luxon';\nimport { apply, call, put, takeEvery } from 'redux-saga/effects';\nimport { setDateReminder } from '../../actions/dates';\nimport { setReminder } from '../../actions/reminders';\nimport * as reminderUIActions from '../../actions/ui/reminder';\nimport { dateTimeStringsToMillis, DATE_FORMAT } from '../../helpers/calendar';\nimport { DEFAULT_COLOR } from '../../helpers/colors';\nimport { generateUUID } from '../../helpers/uuid';\n\nexport function* openReminder(reminder) {\n  yield put(reminderUIActions.openReminder(reminder));\n}\n\nexport function* newReminder(action) {\n  const initialDate = action.payload;\n  let initialDateTime = yield apply(DateTime, 'local');\n\n  if (initialDate) {\n    const parsed = DateTime.fromFormat(initialDate, DATE_FORMAT);\n    if (parsed.isValid) {\n      initialDateTime = initialDateTime.set({\n        year: parsed.year,\n        month: parsed.month,\n        day: parsed.day,\n      });\n    }\n  }\n\n  const initialColor = DEFAULT_COLOR;\n\n  const reminder = {\n    id: null,\n    description: '',\n    color: initialColor,\n    dateTime: initialDateTime.toMillis(),\n    city: '',\n  };\n\n  yield call(openReminder, reminder);\n}\n\nexport function* editReminder(action) {\n  yield call(openReminder, action.payload);\n}\n\nexport function* submitReminder(action) {\n  const reminder = action.payload;\n  let id = reminder.id;\n  if (!id) {\n    // It is a new reminder, create an id for it since we don't have a backend.\n    id = yield call(generateUUID);\n  }\n\n  const reminderToSet = {\n    id,\n    description: reminder.description,\n    color: reminder.color,\n    dateTime: dateTimeStringsToMillis(reminder.date, reminder.time),\n    city: reminder.city,\n  };\n\n  const dateReminder = { date: reminder.date, reminderId: reminderToSet.id };\n\n  // TODO: Save do IDB (with dexie)\n\n  yield put(setReminder(reminderToSet));\n  yield put(setDateReminder(dateReminder));\n\n  yield put(reminderUIActions.closeReminder());\n}\n\nexport function* watchNewReminder() {\n  yield takeEvery(reminderUIActions.NEW_REMINDER, newReminder);\n}\n\nexport function* watchEditReminder() {\n  yield takeEvery(reminderUIActions.EDIT_REMINDER, editReminder);\n}\n\nexport function* watchSubmitReminder() {\n  yield takeEvery(reminderUIActions.SUBMIT_REMINDER, submitReminder);\n}\n","import { all, call, spawn } from 'redux-saga/effects';\nimport { IS_PRODUCTION } from '../config/env';\nimport { watchAndLog } from './logger';\nimport { watchGetForecast } from './ui/forecast';\nimport {\n  watchEditReminder,\n  watchNewReminder,\n  watchSubmitReminder,\n} from './ui/reminder';\n\n/**\n * Spawns given sagas, restarting them if they throw any uncaught error.\n * @param  {...GeneratorFunction} sagas The sagas to spawn and keep alive\n */\nfunction* keepAlive(...sagas) {\n  yield all(\n    sagas.map((saga) =>\n      spawn(function* () {\n        while (true) {\n          try {\n            // Start the worker saga\n            yield call(saga);\n            // If it finishes, exit\n            break;\n          } catch (e) {\n            // If an error happens it will be logged\n            // and the loop will restart the saga\n            console.groupCollapsed(\n              `%cSaga ${saga.name} crashed and will be restarted...`,\n              `\n                font-size: 600;\n                color: #DC2626;\n                background-color: #FECACA;\n                padding: 0.125rem 0.25rem;\n                border-radius: 0.125rem;\n              `\n            );\n            console.error(e);\n            console.groupEnd();\n          }\n        }\n      })\n    )\n  );\n}\n\nexport default function* rootSaga() {\n  const sagas = [\n    watchNewReminder,\n    watchEditReminder,\n    watchSubmitReminder,\n    watchGetForecast,\n  ];\n  if (!IS_PRODUCTION) {\n    sagas.unshift(watchAndLog);\n  }\n\n  yield keepAlive(...sagas);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\nimport './css/index.css';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducers, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}